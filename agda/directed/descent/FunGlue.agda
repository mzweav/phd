{-# OPTIONS --rewriting #-}

open import Agda.Primitive using (lzero; lsuc; Level) renaming (_‚äî_ to lmax)
open import Lib
open import Proposition
open import Interval
open import Path
open import directed.DirInterval
open import Proposition
open import Cofibs
open import Equiv
open import Kan
open import universe.Universe
open import universe.Pi
open import universe.Sigma
open import universe.Path
open import universe.Univalence
open import Glue
open import directed.Covariant
open import directed.universe.FunGlueKan
open import directed.descent.Lex

module directed.descent.FunGlue where

  private
    dua : ‚àÄ {@‚ô≠ l : Level} (x : ùüö)
            (A : U{l})
            (B : U{l})
            (f : El A ‚Üí El B)
            ‚Üí -------------------------
            U{l}
    dua x A B f = FunGlueUKan (fungluedatakan A B f x)

  FunGlue= : ‚àÄ {@‚ô≠ l : Level} {i : ùüö}
            {A : U{l}}
            {B : U{l}}
            {f : El A ‚Üí El B}
            (x y : El (dua i A B f))
            (_ : (i=0 : i == ``0) ‚Üí coe (Glue-Œ± _ _ _ _ (inl i=0)) x == coe (Glue-Œ± _ _ _ _ (inl i=0)) y)
            (_ : unglue x == unglue y)
            ‚Üí
            x == y
  FunGlue= {l} {i} {A} {B} {f} x y Aeq Beq  = ! (GlueŒ∑ y)
                                              ‚àò ap (Œª x ‚Üí glue _ _ _ _ (fst (fst x)) (snd (fst x) , snd x))
                                                   (pair= (√ó= (Œª= (‚à®-elimd01 _ Aeq
                                                                               (Œª i=1 ‚Üí ! (unglue-Œ± y (inr i=1)) ‚àò Beq ‚àò unglue-Œ± x (inr i=1))))
                                                              Beq)
                                                          (Œª= Œª _ ‚Üí uip))
                                              ‚àò GlueŒ∑ x

  dua-path : ‚àÄ {@‚ô≠ l : Level} {i : ùüö}
            {A : U{l}}
            {B : U{l}}
            {f : El A ‚Üí El B}
            (x y : El (dua i A B f))
            (pa :  (i=0 : i == ``0) ‚Üí Path (El A) (coe (Glue-Œ± _ _ _ _ (inl i=0)) x) (coe (Glue-Œ± _ _ _ _ (inl i=0)) y))
            (pb : Path (El B) (unglue x) (unglue y))
            (peq : ‚àÄ j ‚Üí (i=0 : i == ``0) ‚Üí f (fst (pa i=0) j) == fst pb j)
            ‚Üí
            Path (El (dua i A B f)) x y
  dua-path {i = i} {A} {B} {f} x y pa pb peq = (Œª j ‚Üí glue _ _ _ _
                                                           (‚à®-elimd01 _ (Œª i=0 ‚Üí fst (pa i=0) j)
                                                                        (Œª _ ‚Üí fst pb j))
                                                           (fst pb j , ‚à®-elimd01 _ (peq j) (Œª _ ‚Üí id)))
                                               , ! (GlueŒ∑ x)
                                                 ‚àò (FunGlue= _ _ (Œª i=0 ‚Üí ! (glue-Œ± _ _ (inl i=0))
                                                                        ‚àò fst (snd (pa i=0))
                                                                        ‚àò glue-Œ± _ _ (inl i=0))
                                                                 (! (GlueŒ≤ _ _)
                                                                 ‚àò fst (snd pb)
                                                                 ‚àò GlueŒ≤ _ _))
                                               , ! (GlueŒ∑ y)
                                                 ‚àò (FunGlue= _ _ (Œª i=0 ‚Üí ! (glue-Œ± _ _ (inl i=0))
                                                                        ‚àò snd (snd (pa i=0))
                                                                        ‚àò glue-Œ± _ _ (inl i=0))
                                                                 (! (GlueŒ≤ _ _)
                                                                 ‚àò snd (snd pb)
                                                                 ‚àò GlueŒ≤ _ _))

  DGlue-eq0 : ‚àÄ {@‚ô≠ l : Level} (x : ùüö)
                (A : U{l})
                (B : U{l})
                (f : El A ‚Üí El B)
                (g : ElD (dua x A B f))
                (x=0 : x == ``0)
                ‚Üí
                D-func {A = dua x A B f} {B = B} unglue g == (D-func f (transport ElD (FunGlueUKan0 _ x=0) g))
  DGlue-eq0 x A B f g x=0 = ap {M = (dua x A B f) , unglue , g} {N = A , f , (transport ElD (FunGlueUKan0 _ x=0) g)}
                       (Œª (x : Œ£ (Œª X ‚Üí ((El X ‚Üí El B) √ó El (D X)))) ‚Üí D-func (fst (snd x)) (snd (snd x)))
                       (pair= (FunGlueUKan0 _ x=0)
                              (√ó= (het-to-hom (Œª=o (Œª g z eq ‚Üí apdo f (het-to-hom (eq ‚àòh transport-=h (Œª X ‚Üí X) (Glue-Œ± _ _ _ _ (inl x=0))))
                                                                      ‚àòh hom-to-het (! (unglue-Œ± g (inl x=0))))
                                                                      ‚àòh transport-=h (Œª X ‚Üí El X ‚Üí El B) (FunGlueUKan0 _ x=0))
                                              ‚àò fst-transport-Œ£' {A = Œª X ‚Üí El X ‚Üí El B} {B = Œª X (_ : El X ‚Üí El B) ‚Üí El (D X)}
                                                                 (FunGlueUKan0 _ x=0) (unglue , g))
                                  (snd-transport-√ó' {A = Œª X ‚Üí El X ‚Üí El B} {B = Œª X ‚Üí El (D X)} (FunGlueUKan0 _ x=0) (unglue , g))))

  DGlue-fun : ‚àÄ {@‚ô≠ l : Level} (x : ùüö)
                (A : U{l})
                (B : U{l})
                (f : El A ‚Üí El B)
                ‚Üí
                El (D (dua x A B f)) ‚Üí El (dua x (D A) (D B) (D-func f))
  DGlue-fun x A B f g = glue _ _ _ _ (‚à®-elimd01 _ (Œª x=0 ‚Üí transport ElD (FunGlueUKan0 _ x=0) g)
                                                  (Œª _ ‚Üí D-func unglue g))
                                     (D-func unglue g , ‚à®-elimd01 _ (Œª x=0 ‚Üí ! (DGlue-eq0 x A B f g x=0)) (Œª _ ‚Üí id))

  postulate
    DGlue-eq : ‚àÄ {@‚ô≠ l : Level} (x : ùüö)
                 (A : U{l})
                 (B : U{l})
                 (f : El A ‚Üí El B)
                 ‚Üí
                 isIso (El (D (dua x A B f))) (El (dua x (D A) (D B) (D-func f))) (DGlue-fun x A B f)

  DGlue-Œ∑'' : ‚àÄ {@‚ô≠ l : Level} (x : ùüö)
                 (A : U{l})
                 (B : U{l})
                 (f : El A ‚Üí El B)
                 ‚Üí
                 El (dua x A B f) ‚Üí (El (dua x A (D B) ((D-func f) o (Œ∑ A))))
  DGlue-Œ∑'' x A B f g = glue _ _ _ _ (‚à®-elimd01 _ (Œª x=0 ‚Üí (coe (Glue-Œ± _ _ _ _ (inl x=0)) g))
                                                  (Œª _ ‚Üí Œ∑ B (unglue g)))
                                    (Œ∑ B (unglue g)
                                    , ‚à®-elimd01 _ (Œª x=0 ‚Üí ap (Œ∑ B) (unglue-Œ± g (inl x=0))
                                                           ‚àò ap (Œª f ‚Üí f (coe (Glue-Œ± _ _ _ _ (inl x=0)) g)) (Œ∑-nat f))
                                                  (Œª _ ‚Üí id))

  DGlue-Œ∑' : ‚àÄ {@‚ô≠ l : Level} (x : ùüö)
                 (A : U{l})
                 (B : U{l})
                 (f : El A ‚Üí El B)
                 ‚Üí
                 El (dua x A B f) ‚Üí (El (dua x (D A) (D B) (D-func f)))
  DGlue-Œ∑' x A B f g = glue _ _ _ _ (‚à®-elimd01 _ (Œª x=0 ‚Üí Œ∑ A (coe (Glue-Œ± _ _ _ _ (inl x=0)) g))
                                                 (Œª _ ‚Üí Œ∑ B (unglue g)))
                                    (Œ∑ B (unglue g)
                                    , ‚à®-elimd01 _ (Œª x=0 ‚Üí ap (Œ∑ B) (unglue-Œ± g (inl x=0))
                                                           ‚àò ap (Œª f ‚Üí f (coe (Glue-Œ± _ _ _ _ (inl x=0)) g)) (Œ∑-nat f)) (Œª _ ‚Üí id))

  DGlue-Œ∑eq : ‚àÄ {@‚ô≠ l : Level} (x : ùüö)
                 (A : U{l})
                 (B : U{l})
                 (f : El A ‚Üí El B)
                 ‚Üí
                 (isIso.g (DGlue-eq x A B f) o (DGlue-Œ∑' x A B f)) == Œ∑ (dua x A B f)
  DGlue-Œ∑eq x A B f = Œª= Œª g ‚Üí isIso.gf (DGlue-eq x A B f) (Œ∑ (dua x A B f) g)
                               ‚àò ap (isIso.g (DGlue-eq x A B f))
                                    (FunGlue= _ _ (Œª x=0 ‚Üí ! (glue-Œ± _ _ (inl x=0))
                                                           ‚àò het-to-hom (!h (transport-=h ElD (FunGlueUKan0 _ x=0))
                                                           ‚àòh apdo2 (Œª X x ‚Üí Œ∑ X x)
                                                                    (! (FunGlueUKan0 _ x=0))
                                                                    (transport-=h (Œª X ‚Üí X) (Glue-Œ± _ _ _ _ (inl x=0))))
                                                           ‚àò glue-Œ± _ _ (inl x=0))
                                                  (! (GlueŒ≤ _ _)
                                                  ‚àò ! (ap (Œª f ‚Üí f g) (Œ∑-nat {A = dua x A B f} {B = B} unglue))
                                                  ‚àò GlueŒ≤ _ _))

  Glue-isStack'' : ‚àÄ {@‚ô≠ l : Level} (x : ùüö)
                   {A : U{l}}
                   {B : U{l}}
                   (f : El A ‚Üí El B)
                   (_ : El (isStack A))
                   (_ : El (isStack B))
                   ‚Üí -------------------------
                   hasSection _ _ (DGlue-Œ∑'' x A B f)
  Glue-isStack'' x {A} {B} f stackA stackB = patch , path1 where  

    patchB = fst (isStack-to-QisStack stackB)
    patchB-eq = snd (isStack-to-QisStack stackB)
    
    pathb : (g : El (dua x A (D B) ((D-func f) o (Œ∑ A)))) (x=0 : x == ``0)
            ‚Üí Path (El B) (patchB (unglue g)) (f (coe (Glue-Œ± _ _ _ _ (inl x=0)) g))
    pathb g x=0 = transport (Œª g' ‚Üí Path (El B) (patchB g') (f (coe (Glue-Œ± _ _ _ _ (inl x=0)) g)))
                            (unglue-Œ± g (inl x=0)
                              ‚àò ap! (Œª h ‚Üí h (coe (Glue-Œ± _ _ _ _ (inl x=0)) g)) (Œ∑-nat f))
                            (apPath (Œª h ‚Üí h (f (coe (Glue-Œ± _ _ _ _ (inl x=0)) g))) patchB-eq)

    pathb' : (g : El (dua x A B f)) ‚Üí Path (El B) (patchB (unglue (DGlue-Œ∑'' x A B f g))) (unglue g)
    pathb' g = transport! (Œª g' ‚Üí  Path (El B) (patchB g') (unglue g)) (GlueŒ≤ _ _) (apPath (Œª h ‚Üí h (unglue g)) patchB-eq)

    pathb-eq' : (g : El (dua x A B f)) (x=0 : x == ``0) ‚Üí pathb' g =h pathb (DGlue-Œ∑'' x A B f g) x=0
    pathb-eq' g x=0 = !h (transport-=h (Œª g' ‚Üí Path (El B) (patchB g') (f (coe (Glue-Œ± _ _ _ _ (inl x=0)) (DGlue-Œ∑'' x A B f g))))
                                       (unglue-Œ± (DGlue-Œ∑'' x A B f g) (inl x=0)
                                       ‚àò ap! (Œª h ‚Üí h (coe (Glue-Œ± _ _ _ _ (inl x=0)) (DGlue-Œ∑'' x A B f g))) (Œ∑-nat f)))
                      ‚àòh apdo (Œª h ‚Üí apPath h patchB-eq)
                              (Œª= Œª h ‚Üí ap h (ap f (! (glue-Œ± _ _ (inl x=0)))
                                        ‚àò ! (unglue-Œ± g (inl x=0))))
                      ‚àòh transport-=h (Œª g' ‚Üí  Path (El B) (patchB g') (unglue g)) (! (GlueŒ≤ _ _))

    pathb-eq : (g : El (dua x A B f)) (x=0 : x == ``0) (i : I) ‚Üí fst (pathb' g) i == fst (pathb (DGlue-Œ∑'' x A B f g) x=0) i 
    pathb-eq g x=0 i = het-to-hom (ap=o1 id {i} (fst (pathb' g))
                                         (fst (pathb (DGlue-Œ∑'' x A B f g) x=0))
                                         (pair=h-fst (Œª=o1 (Œª p ‚Üí hom-to-het (ap (Œª g' ‚Üí (p `0 == patchB (unglue (DGlue-Œ∑'' x A B f g)))
                                                                                         √ó (p `1 == g'))
                                                                                 (ap f (! (glue-Œ± _ _ (inl x=0)))
                                                                                 ‚àò ! (unglue-Œ± g (inl x=0))))))
                                                     (pathb-eq' g x=0)) i)

    fixb' : ‚àÄ i (g : El (dua x A (D B) ((D-func f) o (Œ∑ A)))) ‚Üí _
    fixb' i g = (hcomEl B) `0 i (x == ``0)
                        (Œª i x=0 ‚Üí fst (pathb g x=0) i)
                        (patchB (unglue g)
                        , (Œª x=0 ‚Üí fst (snd (pathb g x=0))))

    fixb : (g : El (dua x A (D B) ((D-func f) o (Œ∑ A)))) ‚Üí _
    fixb = fixb' `1

    patch : El (dua x A (D B) ((D-func f) o (Œ∑ A))) ‚Üí El (dua x A B f)
    patch g = glue _ _ _ _
                   (‚à®-elimd01 _ (Œª x=0 ‚Üí coe (Glue-Œ± _ _ _ _ (inl x=0)) g)
                                (Œª _ ‚Üí fst (fixb g)))
                   (fst (fixb g)
                   , ‚à®-elimd01 _ (Œª x=0 ‚Üí fst (snd (fixb g)) x=0 ‚àò ! (snd (snd (pathb g x=0)))) (Œª _ ‚Üí id))

    patch-path : (g : El (dua x A B f)) ‚Üí _
    patch-path g = !Path (hcomEl B) (apPath (Œª f ‚Üí f (unglue g)) patchB-eq)

    path-x=0 : (g : El (dua x A B f)) ‚Üí (i j : I) ‚Üí _
    path-x=0 g i j = (hcomEl B) `1 i ((j == `0) ‚à® (j == `1))
                                (Œª i ‚Üí case01 (Œª _ ‚Üí fst (patch-path g) i)
                                              (Œª _ ‚Üí unglue g))
                                (fst (pathb' g) j
                                , ‚à®-elim01 _ (Œª j=0 ‚Üí ap! (fst (pathb' g)) j=0
                                                      ‚àò ! (fst (snd (pathb' g)))
                                                      ‚àò ap patchB (! (GlueŒ≤ _ _))
                                                      ‚àò snd (snd (patch-path g)))
                                             (Œª j=1 ‚Üí ap! (fst (pathb' g)) j=1
                                                      ‚àò ! (snd (snd (pathb' g)))))

    path-fixb : (g : El (dua x A B f)) ‚Üí (i : I) ‚Üí _
    path-fixb g i = (hcomEl B) `0 `1 ((x == ``0) ‚à® ((i == `0) ‚à® (i == `1)))
                             (Œª j ‚Üí case (Œª x=0 ‚Üí fst (path-x=0 g i j))
                                         (case01 (Œª i=0 ‚Üí fst (path-x=0 g i j))
                                                 (Œª i=1 ‚Üí fst (fixb' j (DGlue-Œ∑'' x A B f g))))
                                          (Œª x=0 ‚Üí ‚à®-elim01 _ (Œª i=0 ‚Üí id)
                                                              (Œª i=1 ‚Üí fst (snd (fixb' j (DGlue-Œ∑'' x A B f g))) x=0
                                                                       ‚àò pathb-eq g x=0 j
                                                                       ‚àò ! ((snd (snd (path-x=0 g i j))) (! i=1)))))
                             (fst (patch-path g) i
                             , ‚à®-elim _ (Œª _ ‚Üí ! (fst (snd (path-x=0 g i `0)) (inl id)))
                                        (‚à®-elim01 _ (Œª i=0 ‚Üí ! (fst (snd (path-x=0 g i `0)) (inl id)))
                                                    (Œª i=1 ‚Üí ap! (fst (patch-path g)) i=1
                                                             ‚àò ! (snd (snd (patch-path g)))
                                                             ‚àò  ap patchB (GlueŒ≤ _ _)
                                                             ‚àò ! (snd (snd (fixb' `0 (DGlue-Œ∑'' x A B f g))) id)))
                                        (Œª _ _ ‚Üí uip))
  
    path-unglue' : ‚àÄ g ‚Üí Path (El B) (unglue g) (fst (fixb (DGlue-Œ∑'' x A B f g)))
    path-unglue' g = (Œª i ‚Üí fst (path-fixb g i))
                     , ! (fst (snd (path-x=0 g `0 `1)) (inr id))
                       ‚àò ! (fst (snd (path-fixb g `0)) (inr (inl id)))
                     , ! (fst (snd (path-fixb g `1)) (inr (inr id)))

    path1' : ‚àÄ g ‚Üí _
    path1' g = dua-path _ _
                      (Œª x=0 ‚Üí (Œª _ ‚Üí coe (Glue-Œ± _ _ _ _ (inl x=0)) g)
                                      , id
                                      , !(glue-Œ± _ _ (inl x=0)) ‚àò ! (glue-Œ± _ _ (inl x=0)))
                      (! (GlueŒ≤ _ _) =‚àò path-unglue' g)
                      (Œª i x=0 ‚Üí fst (snd (path-fixb g i)) (inl x=0)
                                 ‚àò fst (snd (path-x=0 g i `1)) (inr id)
                                 ‚àò unglue-Œ± g (inl x=0))

    path-unglue : ‚àÄ g ‚Üí Path (El B) (fst (fixb (DGlue-Œ∑'' x A B f g))) (unglue g)
    path-unglue g = !Path (hcomEl B) (path-unglue' g)

    path1 : ‚àÄ g ‚Üí _
    path1 g = !Path (hcomEl (dua x A B f)) (path1' g)
    

  Glue-isStack' : ‚àÄ {@‚ô≠ l : Level} (x : ùüö)
                   {A : U{l}}
                   {B : U{l}}
                   (f : El A ‚Üí El B)
                   (_ : El (isStack A))
                   (_ : El (isStack B))
                   ‚Üí -------------------------
                   hasSection _ _ (DGlue-Œ∑' x A B f)
  Glue-isStack' {l} x {A} {B} f stackA stackB = transport (El o fib1) (snd (snd Œ∑-abs1)) equiv where

    GlueŒ£path : Path (Œ£ Œª X ‚Üí Œ£ (Œª (f' : (El A ‚Üí El X) √ó (El X ‚Üí ElD A)) ‚Üí Path _ (snd f' o fst f') (Œ∑ A)))
                     (A , ((Œª a ‚Üí a) , Œ∑ A) , idPath (Œ∑ A))
                     (D A , (Œ∑ A , (Œª a ‚Üí a)) , idPath (Œ∑ A))
    GlueŒ£path = ua-Œ£-path' A (D A) (Œ∑ A , stackA)

    Œ∑-fixb' : ‚àÄ (X : U{l})
              (f1 : El A ‚Üí El X)
              (f2 : El X ‚Üí ElD A)
              (Œ∑Path : Path _ (f2 o f1) (Œ∑ A))
              (g : El (dua x A B f)) ‚Üí (i : I) ‚Üí _
    Œ∑-fixb' X f1 f2 Œ∑Path g i = (hcomEl (D B)) `1 i (x == ``0)
                                               (Œª z x=0 ‚Üí (D-func f o (fst Œ∑Path z)) (coe (Glue-Œ± _ _ _ _ (inl x=0)) g))
                                               (Œ∑ B (unglue g)
                                               , Œª x=0 ‚Üí ap (Œ∑ B) (unglue-Œ± g (inl x=0))
                                                         ‚àò ap (Œª f' ‚Üí f' (coe (Glue-Œ± _ _ _ _ (inl x=0)) g)) (Œ∑-nat f)
                                                         ‚àò ap (Œª f' ‚Üí (D-func f o f') (coe (Glue-Œ± _ _ _ _ (inl x=0)) g)) (snd (snd Œ∑Path)))

    Œ∑-fixb : ‚àÄ (X : U{l})
              (f1 : El A ‚Üí El X)
              (f2 : El X ‚Üí ElD A)
              (Œ∑Path : Path _ (f2 o f1) (Œ∑ A))
              (g : El (dua x A B f)) ‚Üí _
    Œ∑-fixb X f1 f2 Œ∑Path g = Œ∑-fixb' X f1 f2 Œ∑Path g `0

    Œ∑-abs : ‚àÄ (X : U{l})
              (f1 : El A ‚Üí El X)
              (f2 : El X ‚Üí ElD A)
              (Œ∑Path : Path _ (f2 o f1) (Œ∑ A))
              ‚Üí
              El (dua x A B f) ‚Üí (El (dua x X (D B) ((D-func f) o f2)))
    Œ∑-abs X f1 f2 Œ∑Path g = glue _ _ _ _ (‚à®-elimd01 _ (Œª x=0 ‚Üí f1 (coe (Glue-Œ± _ _ _ _ (inl x=0)) g))
                                                         (Œª _ ‚Üí fst (Œ∑-fixb X f1 f2 Œ∑Path g)))
                                    (fst (Œ∑-fixb X f1 f2 Œ∑Path g)
                                    , ‚à®-elimd01 _ (Œª x=0 ‚Üí fst (snd (Œ∑-fixb X f1 f2 Œ∑Path g)) x=0
                                                           ‚àò ap! (Œª f' ‚Üí (D-func f o f') (coe (Glue-Œ± _ _ _ _ (inl x=0)) g)) (fst (snd Œ∑Path)))
                                                  (Œª _ ‚Üí id))

    Œ∑-abs0b : ‚àÄ g ‚Üí Path (El (D B)) (fst (Œ∑-fixb A (Œª a ‚Üí a) (Œ∑ A) (idPath (Œ∑ A)) g)) (Œ∑ B (unglue g))
    Œ∑-abs0b g = (Œª i ‚Üí fst (Œ∑-fixb' A (Œª a ‚Üí a) (Œ∑ A) (idPath (Œ∑ A)) g i)) , id , ! (snd (snd (Œ∑-fixb' A (Œª a ‚Üí a) (Œ∑ A) (idPath (Œ∑ A)) g `1)) id)

    Œ∑-abs1b : ‚àÄ g ‚Üí Path (El (D B)) (fst (Œ∑-fixb (D A) (Œ∑ A) (Œª a ‚Üí a) (idPath (Œ∑ A)) g)) (Œ∑ B (unglue g))
    Œ∑-abs1b g = (Œª i ‚Üí fst (Œ∑-fixb' (D A) (Œ∑ A) (Œª a ‚Üí a) (idPath (Œ∑ A)) g i)) , id , ! (snd (snd (Œ∑-fixb' (D A) (Œ∑ A) (Œª a ‚Üí a) (idPath (Œ∑ A)) g `1)) id)

    Œ∑-abs0 : Path _ (Œ∑-abs A (Œª a ‚Üí a) (Œ∑ A) (idPath (Œ∑ A))) (DGlue-Œ∑'' x A B f)
    Œ∑-abs0 = funext (Œª g ‚Üí dua-path _ _ (Œª x=0 ‚Üí ((! (glue-Œ± _ _ (inl x=0))) =‚àò idPath (coe (Glue-Œ± _ _ _ _ (inl x=0)) g)) ‚àò= (glue-Œ± _ _ (inl x=0)))
                                        (((! (GlueŒ≤ _ _)) =‚àò Œ∑-abs0b g) ‚àò= GlueŒ≤ _ _)
                                        (Œª i x=0 ‚Üí fst (snd (Œ∑-fixb' A (Œª a ‚Üí a) (Œ∑ A) (idPath (Œ∑ A)) g i)) x=0)) 

    Œ∑-abs1 : Path _ (Œ∑-abs (D A) (Œ∑ A) (Œª a ‚Üí a) (idPath (Œ∑ A))) (DGlue-Œ∑' x A B f)
    Œ∑-abs1 = funext (Œª g ‚Üí dua-path _ _ (Œª x=0 ‚Üí ((! (glue-Œ± _ _ (inl x=0))) =‚àò idPath (Œ∑ A (coe (Glue-Œ± _ _ _ _ (inl x=0)) g))) ‚àò= (glue-Œ± _ _ (inl x=0)))
                                        (((! (GlueŒ≤ _ _)) =‚àò Œ∑-abs1b g) ‚àò= GlueŒ≤ _ _)
                                        (Œª i x=0 ‚Üí fst (snd (Œ∑-fixb' (D A) (Œ∑ A) (Œª a ‚Üí a) (idPath (Œ∑ A)) g i)) x=0))

    fib : (X : (Œ£ Œª X ‚Üí Œ£ (Œª (f' : (El A ‚Üí El X) √ó (El X ‚Üí ElD A)) ‚Üí Path _ (snd f' o fst f') (Œ∑ A)))) ‚Üí _
    fib X = hasSection-code (dua x A B f) (dua x (fst X) (D B) ((D-func f) o (snd (fst (snd X))))) (Œ∑-abs (fst X) (fst (fst (snd X))) (snd (fst (snd X))) (snd (snd X)))

    fib0 : ‚àÄ f' ‚Üí U
    fib0 f' = hasSection-code (dua x A B f) (dua x A (D B) ((D-func f) o (Œ∑ A))) f'

    fib1 : ‚àÄ f' ‚Üí U
    fib1 f' = hasSection-code (dua x A B f) (dua x (D A) (D B) ((D-func f))) f'

    equiv0 : El (fib0 (fst Œ∑-abs0 `0))
    equiv0 = fst (comEl' fib0 (fst Œ∑-abs0) `1 `0 ‚ä• (Œª _ ‚Üí abort)
                    (transport! (El o fib0) (snd (snd Œ∑-abs0)) (Glue-isStack'' x f stackA stackB) , Œª ff ‚Üí abort ff))

    equiv1 : El (fib (fst GlueŒ£path `1))
    equiv1 = fst (comEl' fib
                         (fst GlueŒ£path) `0 `1 ‚ä• (Œª _ ‚Üí abort)
                         (transport! (El o fib) {M = fst GlueŒ£path `0} {N = (A , ((Œª a ‚Üí a) , Œ∑ A) , idPath (Œ∑ A))}
                                     ((fst (snd GlueŒ£path)))
                                     (transport (El o fib0) (fst (snd Œ∑-abs0)) equiv0)
                         , (Œª ff ‚Üí abort ff)))

    equiv : El (fib1 (fst Œ∑-abs1 `1))
    equiv = fst (comEl' fib1 (fst Œ∑-abs1) `0 `1 ‚ä• (Œª _ ‚Üí abort)
                   (transport! (El o fib1)
                               (fst (snd Œ∑-abs1))
                               (transport (El o fib) (snd (snd GlueŒ£path)) equiv1)
                   , Œª ff ‚Üí abort ff))

  Glue-isStack : ‚àÄ {@‚ô≠ l : Level} (x : ùüö)
                   {A : U{l}}
                   {B : U{l}}
                   (f : El A ‚Üí El B)
                   (_ : El (isStack A))
                   (_ : El (isStack B))
                   ‚Üí -------------------------
                   El (isStack (dua x A B f))
  Glue-isStack x {A} {B} f stackA stackB = QisStack-to-isStack (fst sec , funext (snd sec)) where

    sec' : hasSection _ _ (isIso.g (DGlue-eq x A B f) o DGlue-Œ∑' x A B f)
    sec' = fst (Glue-isStack' x f stackA stackB) o (DGlue-fun x A B f)
           , (Œª g ‚Üí transport! (Œª h ‚Üí Path _ ((fst (Glue-isStack' x f stackA stackB) o h o DGlue-Œ∑' x A B f) g) g)
                               (Œª= (isIso.fg (DGlue-eq x A B f)))
                               (snd (Glue-isStack' x f stackA stackB) g))

    sec : hasSection _ _ (Œ∑ (dua x A B f))
    sec = transport (hasSection _ _) (DGlue-Œ∑eq x A B f) sec'
                         
  Glue-patch : ‚àÄ {@‚ô≠ l : Level} (x : ùüö)
                 {A : U{l}}
                 {B : U{l}}
                 (f : El A ‚Üí El B)
                 (_ : El (isStack A))
                 (_ : El (isStack B))
                 ‚Üí ---------------------------------------
                 ElD (dua x A B f) ‚Üí El (dua x A B f)
  Glue-patch {l} x {A} {B} f stackA stackB = getPatch (Glue-isStack x f stackA stackB)

